// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int               @id @default(autoincrement())
  email                   String            @unique
  password                String
  isConfirmed             Boolean           @default(false)
  alias                   String
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  interviewInvites        InterviewInvite[]
  cityUserInputs          CityUserInput[]
  greenCard               Boolean?
  step2CSPathway          Pathway?
  schoolRanking           SchoolRanking?
  yearOfGraduation        Int?
  monthsOfUSCE            Int?
  ecfmgCertified          Boolean?
  visaRequired            Boolean?
  graduateType            GraduateType?
  medicalDegree           MedicalDegree?
  img                     IMGType?
  step1ScorePass          Boolean?
  step1Score              Int?
  step2Score              Int?
  step3Score              Int?
  comlex1ScorePass        Boolean?
  comlex2Score            Int?
  redFlags                Boolean?
  redFlagsExplanation     String?
  aoa                     Boolean?
  sigmaSigmaPhi           Boolean?
  goldHumanism            Boolean?
  numPublications         Int?
  numWorkExperiences      Int?
  numVolunteerExperiences Int?
  classRank               ClassRanking?
  otherDegrees            String?
  numApplications         Int?
  numInterviews           Int?
  numWithdrawn            Int?
  numRejected             Int?
  numWaitlisted           Int?
  applicationYear         Int?
  threads                 Thread[]
  replies                 Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Thread {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  replies   Reply[]
}

model Specialty {
  id            Int       @id @default(autoincrement())
  specialtyCode String    @unique
  name          String
  programs      Program[]
}

model Institution {
  id              Int       @id @default(autoincrement())
  name            String
  institutionCode String    @unique
  programs        Program[]
  cityId          Int?
  city            City?     @relation(fields: [cityId], references: [id])
}

model Program {
  id            Int    @id @default(autoincrement())
  name          String
  institutionId Int
  specialtyId   Int

  nrmpProgramCode  String            @unique
  institution      Institution       @relation(fields: [institutionId], references: [id])
  specialty        Specialty         @relation(fields: [specialtyId], references: [id])
  interviewInvites InterviewInvite[]
  image            String?

  @@unique([institutionId, specialtyId, name])
}

model InterviewInvite {
  id                   Int            @id @default(autoincrement())
  anonymous            Boolean
  graduateType         GraduateType?
  img                  IMGType?
  inviteDateTime       DateTime
  geographicPreference Boolean?
  signal               Boolean?
  locationState        LocationState?
  medicalDegree        MedicalDegree?
  step1ScorePass       Boolean?
  step1Score           Int?
  step2Score           Int?
  comlex1ScorePass     Boolean?
  comlex2Score         String?
  visaRequired         Boolean?
  subI                 Boolean?
  home                 Boolean?
  yearOfGraduation     Int?
  greenCard            Boolean?
  away                 Boolean?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  programId Int
  program   Program @relation(fields: [programId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GraduateType {
  US
  IMG
}

enum IMGType {
  nonUSIMG
  USIMG
}

enum LocationState {
  IS
  OOS
}

enum MedicalDegree {
  MD
  DO
}

enum SchoolRanking {
  top20
  top50
  mid
  low
  unranked
}

enum ClassRanking {
  top10
  top25
  top50
  bottom50
}

enum Pathway {
  Pathway1
  Pathway2
  Pathway3
  Pathway4
  Pathway5
  Pathway6
}

model City {
  id           Int             @id @default(autoincrement())
  name         String
  state        String
  userInputs   CityUserInput[] // Relation field to CityUserInput
  institutions Institution[]

  @@index([name, state])
}

model CityUserInput {
  id                   Int      @id @default(autoincrement())
  pros                 String
  cons                 String
  publicTransportation String
  weather              String
  dating               String
  lgbtq                String
  diversity            String
  safetyCrime          String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               Int
  cityId               Int

  city City @relation(fields: [cityId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([cityId])
  @@index([userId])
}
