// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                   @id @default(autoincrement())
  email                   String                @unique
  password                String
  isConfirmed             Boolean               @default(false)
  alias                   String
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  interviewInvites        InterviewInvite[]
  cityUserInputs          CityUserInput[]
  greenCard               Boolean?
  step2CSPathway          Pathway?
  schoolRanking           SchoolRanking?
  yearOfGraduation        Int?
  monthsOfUSCE            Int?
  ecfmgCertified          Boolean?
  visaRequired            Boolean?
  graduateType            GraduateType?
  medicalDegree           MedicalDegree?
  img                     IMGType?
  step1ScorePass          Boolean?
  step1Score              Int?
  step2Score              Int?
  step3Score              Int?
  comlex1ScorePass        Boolean?
  comlex2Score            Int?
  redFlags                Boolean?
  redFlagsExplanation     String?
  aoa                     Boolean?
  sigmaSigmaPhi           Boolean?
  goldHumanism            Boolean?
  numPublications         Int?
  numWorkExperiences      Int?
  numVolunteerExperiences Int?
  classRank               ClassRanking?
  otherDegrees            String?
  numApplications         Int?
  numInterviews           Int?
  numWithdrawn            Int?
  numRejected             Int?
  numWaitlisted           Int?
  applicationYear         Int?
  threads                 Thread[]
  replies                 Reply[]
  FameShameUserInput      FameShameUserInput[]
  comments                Comment[]
  rankLists               RankList[]
  PostIVCommunication     PostIVCommunication[]
  ScheduleDetails         ScheduleDetails[]
  InterviewLogistics      InterviewLogistics[]
  SecondLook              SecondLook[]
  InterviewRejection      InterviewRejection[]
  InterviewWithdrawal     InterviewWithdrawal[]
  M4InternImpression      M4InternImpression[]
  Malignant               Malignant[]
  LOIResponse             LOIResponse[]
  InterviewImpression     InterviewImpression[]
  Question                Question[]
  Dropped                 Dropped[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Thread {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  replies   Reply[]
}

model Specialty {
  id            Int       @id @default(autoincrement())
  specialtyCode String    @unique
  name          String
  programs      Program[]
}

model Institution {
  id              Int       @id @default(autoincrement())
  name            String
  institutionCode String    @unique
  programs        Program[]
  cityId          Int?
  city            City?     @relation(fields: [cityId], references: [id])
}

model Program {
  id              Int    @id @default(autoincrement())
  name            String
  institutionId   Int
  specialtyId     Int
  rankListId      Int?
  nrmpProgramCode String @unique

  institution         Institution           @relation(fields: [institutionId], references: [id])
  specialty           Specialty             @relation(fields: [specialtyId], references: [id])
  rankLists           RankList[]            @relation("RankedPrograms")
  matchedInLists      RankList[]            @relation("MatchedProgram")
  interviewInvites    InterviewInvite[]
  image               String?
  FameShameUserInput  FameShameUserInput[]
  PostIVCommunication PostIVCommunication[]
  ScheduleDetails     ScheduleDetails[]
  InterviewLogistics  InterviewLogistics[]
  SecondLook          SecondLook[]
  InterviewRejection  InterviewRejection[]
  InterviewWithdrawal InterviewWithdrawal[]
  M4InternImpression  M4InternImpression[]
  Malignant           Malignant[]
  LOIResponse         LOIResponse[]
  InterviewImpression InterviewImpression[]
  Question            Question[]
  Dropped             Dropped[]

  @@unique([institutionId, specialtyId, name])
}

model InterviewInvite {
  id                   Int            @id @default(autoincrement())
  anonymous            Boolean
  graduateType         GraduateType?
  img                  IMGType?
  inviteDateTime       DateTime
  geographicPreference Boolean?
  signal               Boolean?
  locationState        LocationState?
  medicalDegree        MedicalDegree?
  step1ScorePass       Boolean?
  step1Score           Int?
  step2Score           Int?
  comlex1ScorePass     Boolean?
  comlex2Score         String?
  visaRequired         Boolean?
  subI                 Boolean?
  home                 Boolean?
  yearOfGraduation     Int?
  greenCard            Boolean?
  away                 Boolean?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  programId Int
  program   Program @relation(fields: [programId], references: [id])

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  InterviewLogistics InterviewLogistics[]
}

enum GraduateType {
  US
  IMG
}

enum IMGType {
  nonUSIMG
  USIMG
}

enum LocationState {
  IS
  OOS
}

enum MedicalDegree {
  MD
  DO
}

enum SchoolRanking {
  top20
  top50
  mid
  low
  unranked
}

enum ClassRanking {
  top10
  top25
  top50
  bottom50
}

enum Pathway {
  Pathway1
  Pathway2
  Pathway3
  Pathway4
  Pathway5
  Pathway6
}

model City {
  id           Int             @id @default(autoincrement())
  name         String
  state        String
  userInputs   CityUserInput[] // Relation field to CityUserInput
  institutions Institution[]

  @@index([name, state])
}

model CityUserInput {
  id                   Int      @id @default(autoincrement())
  pros                 String
  cons                 String
  publicTransportation String
  weather              String
  dating               String
  lgbtq                String
  diversity            String
  safetyCrime          String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               Int
  cityId               Int

  city City @relation(fields: [cityId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([cityId])
  @@index([userId])
}

model FameShameUserInput {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  fame      String
  shame     String
  programId Int
  program   Program  @relation(fields: [programId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id                    Int                  @id @default(autoincrement())
  userId                Int
  content               String
  user                  User                 @relation(fields: [userId], references: [id])
  RankList              RankList?            @relation(fields: [rankListId], references: [id])
  rankListId            Int?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  PostIVCommunication   PostIVCommunication? @relation(fields: [postIVCommunicationId], references: [id])
  postIVCommunicationId Int?
  ScheduleDetails       ScheduleDetails?     @relation(fields: [scheduleDetailsId], references: [id])
  scheduleDetailsId     Int?
  M4InternImpression    M4InternImpression?  @relation(fields: [m4InternImpressionId], references: [id])
  m4InternImpressionId  Int?
  Malignant             Malignant?           @relation(fields: [malignantId], references: [id])
  malignantId           Int?
  LOIResponse           LOIResponse?         @relation(fields: [lOIResponseId], references: [id])
  lOIResponseId         Int?
  InterviewImpression   InterviewImpression? @relation(fields: [interviewImpressionId], references: [id])
  interviewImpressionId Int?
}

model RankList {
  id                         Int           @id @default(autoincrement())
  userId                     Int
  user                       User          @relation(fields: [userId], references: [id])
  graduateType               GraduateType
  medicalDegree              MedicalDegree
  numberOfProgramsApplied    Int?
  numberOfInvites            Int?
  numberOfInterviewsAttended Int?
  doneWithInterviews         Boolean?
  whyNumberOne               String?
  prioritiesWhenRanking      String?
  hardestPartOfRanking       String?
  comments                   Comment[]
  programs                   Program[]     @relation("RankedPrograms")

  matchedProgramId Int?
  matchedProgram   Program? @relation("MatchedProgram", fields: [matchedProgramId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model PostIVCommunication {
  id                    Int       @id @default(autoincrement())
  userId                Int
  user                  User      @relation(fields: [userId], references: [id])
  programId             Int
  program               Program   @relation(fields: [programId], references: [id])
  communicationReceived String?
  thankYouLetterPolicy  String?
  rankImpact            String?
  source                String?
  comments              Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduleDetails {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  programId Int
  program   Program @relation(fields: [programId], references: [id])

  longOvernightCall    String?
  scheduleContinuity   String?
  locations            String?
  emr                  String?
  startDateOrientation DateTime?
  visaInfo             String?
  union                String?
  midlevel             String?
  ancillary            String?
  teamRatios           String?
  internCap            String?
  admittingSystem      String?
  icuHours             String?
  nightFloat           String?
  sickCallSystem       String?
  moonlighting         String?
  stayUntilSignout     String?
  didactics            String?
  vacationHolidays     String?
  gym                  String?
  food                 String?
  salary               String?
  comments             Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InterviewLogistics {
  id                Int             @id @default(autoincrement())
  sortType          String
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  programId         Int
  program           Program         @relation(fields: [programId], references: [id])
  schedulerPlatform String?
  ivFormat          String?
  timeSlots         String?
  ivPlatform        String?
  openIVDates       DateTime[]
  interviewInviteId Int
  interviewInvite   InterviewInvite @relation(fields: [interviewInviteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SecondLook {
  id            Int       @id @default(autoincrement())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  programId     Int
  program       Program   @relation(fields: [programId], references: [id])
  setting       String?
  date          DateTime?
  bearingOnRank String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InterviewRejection {
  id        Int      @id @default(autoincrement())
  programId Int
  program   Program  @relation(fields: [programId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InterviewWithdrawal {
  id        Int      @id @default(autoincrement())
  programId Int
  program   Program  @relation(fields: [programId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  reason    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model M4InternImpression {
  id                 Int       @id @default(autoincrement())
  userId             Int
  user               User      @relation(fields: [userId], references: [id])
  programId          Int
  program            Program   @relation(fields: [programId], references: [id])
  positiveImpression String?
  negativeImpression String?
  comments           Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Malignant {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  programId   Int
  program     Program       @relation(fields: [programId], references: [id])
  malignant   MalignantEnum
  source      String?
  explanation String?
  comments    Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MalignantEnum {
  Yes
  No
  Maybe
}

model LOIResponse {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  programId Int
  program   Program @relation(fields: [programId], references: [id])

  intent                     Boolean?
  sentTo                     String?
  dateSent                   DateTime?
  response                   Boolean?
  responseTone               String?
  timeBetweenSentAndResponse String?
  mentionedTopChoice         Boolean?
  comments                   Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InterviewImpression {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  programId Int
  program   Program @relation(fields: [programId], references: [id])

  positives                  String?
  negatives                  String?
  howInterviewDayAffectsRank String?
  gift                       String?
  timeGiftReceived           String?
  comments                   Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  programId Int
  program   Program @relation(fields: [programId], references: [id])

  questions String[] @default([]) // A list of strings to store questions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dropped {
  id                       Int       @id @default(autoincrement())
  userId                   Int
  user                     User      @relation(fields: [userId], references: [id])
  programId                Int
  program                  Program   @relation(fields: [programId], references: [id])
  dateDropped              DateTime
  dateOfInterviewCancelled DateTime?
  reason                   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
